
 @Test
    void getIncompletePostsTest() {
        Fundraiser fundraiser = new Fundraiser("klay","klay@gmail.com","klay");
        fundraiserRepositoryDao.save(fundraiser);

        Post incompletePost = new Post("Title1", "Description1", "Category1", LocalDate.of(2024, 1, 1), LocalDate.of(2024, 1, 10), 100.0, 50.0, "incomplete", fundraiser);
        Post completePost = new Post("Title2", "Description2", "Category2", LocalDate.of(2024, 2, 1), LocalDate.of(2024, 2, 10), 200.0, 100.0, "completed", fundraiser);
        postRepositoryDao.save(incompletePost);
        postRepositoryDao.save(completePost);

        List<Post> incompletePosts = null;
        try {
            incompletePosts = postService.getIncompletePosts();
        } catch (PostExceptions e) {
            throw new RuntimeException(e);
        }

        System.out.println("Incomplete Posts: " + incompletePosts);

        Assertions.assertNotNull(incompletePosts);
        Assertions.assertEquals(1, incompletePosts.size(), "Expected only one incomplete post");

        postRepositoryDao.delete(incompletePost);
        postRepositoryDao.delete(completePost);
        fundraiserRepositoryDao.delete(fundraiser);
    }
