import React, { useState, useEffect } from 'react';
import PostService from './services/PostService'; // Assuming PostService is in the services directory

const Post = () => {
  const [posts, setPosts] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState('');
  const postService = new PostService();

  const getPosts = async () => {
    try {
      const { data } = await postService.getAllPosts(); // Destructure data from response
      setPosts(data);
    } catch (error) {
      console.error('Error fetching posts:', error);
    }
  };

  const getPostsByCategory = async (category) => {
    try {
      const { data } = await postService.getPostsByCategory(category); // Destructure data from response
      setPosts(data);
    } catch (error) {
      console.error('Error fetching posts by category:', error);
    }
  };

  const getPostsSortedByDate = async () => {
    try {
      const { data } = await postService.getPostsSortedByDate(); // Destructure data from response
      setPosts(data);
    } catch (error) {
      console.error('Error fetching posts sorted by date:', error);
    }
  };

  const getCompletedPosts = async () => {
    try {
      const { data } = await postService.getCompletedPosts(); // Destructure data from response
      setPosts(data);
    } catch (error) {
      console.error('Error fetching completed posts:', error);
    }
  };

  const getIncompletePosts = async () => {
    try {
      const { data } = await postService.getIncompletedPosts(); // Destructure data from response
      setPosts(data);
    } catch (error) {
      console.error('Error fetching incompleted posts:', error);
    }
  };

  useEffect(() => {
    getPosts(); // Fetch all posts by default on component mount
  }, []);

  const onCategorySelected = (category) => {
    setSelectedCategory(category);
    if (category) {
      getPostsByCategory(category);
    } else {
      getPosts(); // Reset to all posts if category is empty
    }
  };

  return (
    <div>
      <div className="button-container">
        <button value="All Posts" className="filter-button" onClick={getPosts}>All Posts</button>
        <select className="form-select" style={{ maxWidth: '12vw' }} name="Categories" value={selectedCategory} onChange={(e) => onCategorySelected(e.target.value)}>
          <option value="">All Categories</option>
          <option value="education">Education</option>
          <option value="food">Food</option>
          <option value="medical">Medical</option>
        </select>
        <button value="Recent Posts" className="filter-button" onClick={getPostsSortedByDate}>Recent Posts</button>
        <button value="Donatable Posts" className="filter-button" onClick={getIncompletePosts}>Donatable Posts</button>
        <button value="Completed Donations" className="filter-button" onClick={getCompletedPosts}>Completed Donations</button>
      </div>

      <div>
        <h3>Available Posts:</h3>
        {posts.length === 0 && <h6 style={{ textAlign: 'center' }}>No Posts found!</h6>}
        {posts.length > 0 && (
          <div className="post-grid">
            {posts.map((post) => (
              <div className="post-box" key={post.id || post._id}> {/* Assuming a unique ID property */}
                <img
                  src={
                    post.category === 'food'
                      ? 'assets/images/food.jpg'
                      : post.category === 'medical'
                      ? 'assets/images/medical.jpg'
                      : post.category === 'education'
                      ? 'assets/images/education2.png'
                      : ''
                  }
                  alt={post.category + ' Donation'}
                  style={{ width: '100%', height: 'auto', objectFit: 'cover', marginBottom: '10px' }}
                />
                <h4><strong>{post.title}</strong></h4>
                <p><strong>Category:</strong> {post.category}</p>
                <p><strong>Start Date:</strong> {post.startDate}</p>
                <p><strong>End Date:</strong> {post.endDate}</p>
                <p><strong>Amount Requested:</strong> {post.amountRequested}</p>
                <p><strong>Amount Collected:</strong> {post.amountCollected || '0'}</p>
                <p>
                  <strong>Status:</strong> {post.status === 'incomplete' ? 'Donatable' : 'Completed'}
                  {post.status === 'incomplete' && (
                    <span style={{ color: 'red' }}> (Needs Donation)</span>
                  )}
                </p>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default Post;
